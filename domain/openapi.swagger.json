{
  "swagger": "2.0",
  "info": {
    "title": "MarieJ Human Resources",
    "description": "Provides API documentations for services.",
    "version": "1.0",
    "contact": {
      "name": "MarieJ HR",
      "url": "https://gtihub.com/mariej-hr/core",
      "email": "support@mariej.com"
    }
  },
  "tags": [
    {
      "name": "AccountService"
    },
    {
      "name": "AccountAccessService"
    },
    {
      "name": "AccountAdminService"
    },
    {
      "name": "ProfileService"
    },
    {
      "name": "HealthService"
    }
  ],
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/check": {
      "get": {
        "operationId": "HealthService_Check",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1HealthCheckResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/v1ErrorResponse"
            }
          },
          "403": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "500": {
            "description": "Server error.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "service",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "HealthService"
        ]
      }
    },
    "/v1/watch": {
      "get": {
        "operationId": "HealthService_Watch",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1HealthCheckResponse"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1HealthCheckResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/v1ErrorResponse"
            }
          },
          "403": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "500": {
            "description": "Server error.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "service",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "HealthService"
        ]
      }
    },
    "/v1/{tenant}/accounts": {
      "get": {
        "operationId": "AccountAdminService_GetAccounts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAccountsResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/v1ErrorResponse"
            }
          },
          "403": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "500": {
            "description": "Server error.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter.sub",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.email",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.username",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "pagination.orderBy",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AccountAdminService"
        ]
      },
      "post": {
        "operationId": "AccountAdminService_CreateAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateAccountResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/v1ErrorResponse"
            }
          },
          "403": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "500": {
            "description": "Server error.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateAccountRequestBody"
            }
          }
        ],
        "tags": [
          "AccountAdminService"
        ]
      }
    },
    "/v1/{tenant}/accounts/{scope}/me": {
      "get": {
        "operationId": "AccountService_CurrentAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CurrentAccountResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/v1ErrorResponse"
            }
          },
          "403": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "500": {
            "description": "Server error.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "SCOPE_UNSPECIFIED",
              "SCOPE_SYSTEM"
            ]
          }
        ],
        "tags": [
          "AccountService"
        ]
      }
    },
    "/v1/{tenant}/accounts/{scope}/resources/{resource}/me": {
      "get": {
        "operationId": "AccountService_CurrentAccountResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CurrentAccountResourceResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/v1ErrorResponse"
            }
          },
          "403": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "500": {
            "description": "Server error.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "SCOPE_UNSPECIFIED",
              "SCOPE_SYSTEM"
            ]
          },
          {
            "name": "resource",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AccountService"
        ]
      }
    },
    "/v1/{tenant}/accounts/{sub}": {
      "get": {
        "operationId": "AccountAdminService_GetAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAccountResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/v1ErrorResponse"
            }
          },
          "403": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "500": {
            "description": "Server error.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sub",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AccountAdminService"
        ]
      },
      "delete": {
        "operationId": "AccountAdminService_DeleteAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteAccountResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/v1ErrorResponse"
            }
          },
          "403": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "500": {
            "description": "Server error.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sub",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AccountAdminService"
        ]
      },
      "put": {
        "operationId": "AccountAdminService_UpdateAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateAccountResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/v1ErrorResponse"
            }
          },
          "403": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "500": {
            "description": "Server error.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sub",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateAccountRequestBody"
            }
          }
        ],
        "tags": [
          "AccountAdminService"
        ]
      }
    },
    "/v1/{tenant}/accounts/{sub}/roles": {
      "get": {
        "operationId": "AccountAccessService_GetRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetRolesResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/v1ErrorResponse"
            }
          },
          "403": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "500": {
            "description": "Server error.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sub",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SCOPE_UNSPECIFIED",
              "SCOPE_SYSTEM"
            ],
            "default": "SCOPE_UNSPECIFIED"
          },
          {
            "name": "resource",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AccountAccessService"
        ]
      },
      "post": {
        "operationId": "AccountAccessService_GrantRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BoolResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/v1ErrorResponse"
            }
          },
          "403": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "500": {
            "description": "Server error.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sub",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "role",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1Role"
            }
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SCOPE_UNSPECIFIED",
              "SCOPE_SYSTEM"
            ],
            "default": "SCOPE_UNSPECIFIED"
          },
          {
            "name": "resource",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AccountAccessService"
        ]
      }
    },
    "/v1/{tenant}/accounts/{sub}/roles/{role}": {
      "delete": {
        "operationId": "AccountAccessService_RevokeRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BoolResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/v1ErrorResponse"
            }
          },
          "403": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "500": {
            "description": "Server error.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sub",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "role",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "ROLE_UNSPECIFIED",
              "ROLE_ADMIN",
              "ROLE_MANAGER",
              "ROLE_USER",
              "ROLE_GUEST"
            ]
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SCOPE_UNSPECIFIED",
              "SCOPE_SYSTEM"
            ],
            "default": "SCOPE_UNSPECIFIED"
          },
          {
            "name": "resource",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AccountAccessService"
        ]
      }
    },
    "/v1/{tenant}/profiles": {
      "get": {
        "operationId": "ProfileService_GetProfiles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetProfilesResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/v1ErrorResponse"
            }
          },
          "403": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "500": {
            "description": "Server error.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "pagination.orderBy",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ProfileService"
        ]
      }
    },
    "/v1/{tenant}/profiles/{sub}": {
      "get": {
        "operationId": "ProfileService_GetProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetProfileResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/v1ErrorResponse"
            }
          },
          "403": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "500": {
            "description": "Server error.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sub",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ProfileService"
        ]
      },
      "put": {
        "operationId": "ProfileService_SetProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BoolResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/v1ErrorResponse"
            }
          },
          "403": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "404": {
            "description": "Not found.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "500": {
            "description": "Server error.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sub",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1Profile"
            }
          }
        ],
        "tags": [
          "ProfileService"
        ]
      }
    }
  },
  "definitions": {
    "ExperienceEmployment": {
      "type": "string",
      "enum": [
        "EMPLOYMENT_UNSPECIFIED",
        "EMPLOYMENT_FULL_TIME",
        "EMPLOYMENT_PART_TIME",
        "EMPLOYMENT_ON_PROJECT_BASIS"
      ],
      "default": "EMPLOYMENT_UNSPECIFIED"
    },
    "ExperienceModality": {
      "type": "string",
      "enum": [
        "MODALITY_UNSPECIFIED",
        "MODALITY_ON_SITE",
        "MODALITY_HYBRID",
        "MODALITY_REMOTE"
      ],
      "default": "MODALITY_UNSPECIFIED"
    },
    "HealthCheckResponseServingStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "SERVING",
        "NOT_SERVING",
        "SERVICE_UNKNOWN"
      ],
      "default": "UNKNOWN",
      "description": " - SERVICE_UNKNOWN: Used only by the Watch method."
    },
    "InterestArt": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "InterestCompany": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "InterestPerson": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "InterestSport": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "LanguageProficiency": {
      "type": "string",
      "enum": [
        "PROFICIENCY_UNSPECIFIED",
        "PROFICIENCY_A1",
        "PROFICIENCY_A2",
        "PROFICIENCY_B1",
        "PROFICIENCY_B2",
        "PROFICIENCY_C1",
        "PROFICIENCY_C2"
      ],
      "default": "PROFICIENCY_UNSPECIFIED"
    },
    "ProfileAddress": {
      "type": "object",
      "properties": {
        "street": {
          "type": "string"
        },
        "number": {
          "type": "string"
        },
        "apartment": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        }
      }
    },
    "ProfileAward": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "associatedWith": {
          "type": "string"
        },
        "issuer": {
          "type": "string"
        },
        "issueDate": {
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "ProfileCertification": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "issuer": {
          "type": "string"
        },
        "issueDate": {
          "type": "string",
          "format": "date-time"
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time"
        },
        "credentialId": {
          "type": "string"
        },
        "credentialUrl": {
          "type": "string"
        },
        "skills": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "media": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ProfileEducation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "school": {
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/v1ProfileLocation"
        },
        "degree": {
          "type": "string"
        },
        "field": {
          "type": "string"
        },
        "startDate": {
          "type": "string",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "grade": {
          "type": "string"
        },
        "activities": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "skills": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "media": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ProfileExperience": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "company": {
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/v1ProfileLocation"
        },
        "startDate": {
          "type": "string",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "employmentType": {
          "$ref": "#/definitions/ExperienceEmployment"
        },
        "modalityType": {
          "$ref": "#/definitions/ExperienceModality"
        },
        "description": {
          "type": "string"
        },
        "skills": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ProfileInterest": {
      "type": "object",
      "properties": {
        "sport": {
          "$ref": "#/definitions/InterestSport"
        },
        "art": {
          "$ref": "#/definitions/InterestArt"
        },
        "company": {
          "$ref": "#/definitions/InterestCompany"
        },
        "person": {
          "$ref": "#/definitions/InterestPerson"
        }
      }
    },
    "ProfileLanguage": {
      "type": "object",
      "properties": {
        "language": {
          "type": "string"
        },
        "proficiency": {
          "$ref": "#/definitions/LanguageProficiency"
        }
      }
    },
    "ProfileSkill": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "rating": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "protobufEmpty": {
      "type": "object",
      "description": "service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }",
      "title": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1Account": {
      "type": "object",
      "properties": {
        "sub": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Role"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "lastLogin": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1AccountFilter": {
      "type": "object",
      "properties": {
        "sub": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "v1BoolResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      }
    },
    "v1CreateAccountRequestBody": {
      "type": "object",
      "properties": {
        "sub": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "v1CreateAccountResponse": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/v1Account"
        }
      }
    },
    "v1CurrentAccountResourceResponse": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/v1Account"
        }
      }
    },
    "v1CurrentAccountResponse": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/v1Account"
        }
      }
    },
    "v1DeleteAccountResponse": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/v1Account"
        }
      }
    },
    "v1ErrorResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "v1GetAccountResponse": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/v1Account"
        }
      }
    },
    "v1GetAccountsResponse": {
      "type": "object",
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Account"
          }
        },
        "count": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1GetProfileResponse": {
      "type": "object",
      "properties": {
        "profile": {
          "$ref": "#/definitions/v1Profile"
        }
      }
    },
    "v1GetProfilesResponse": {
      "type": "object",
      "properties": {
        "profiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Profile"
          }
        },
        "count": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1GetRolesResponse": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Role"
          }
        }
      }
    },
    "v1HealthCheckResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/HealthCheckResponseServingStatus"
        }
      }
    },
    "v1Pagination": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "string",
          "format": "int64"
        },
        "offset": {
          "type": "string",
          "format": "int64"
        },
        "orderBy": {
          "type": "string"
        }
      }
    },
    "v1Profile": {
      "type": "object",
      "properties": {
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/ProfileAddress"
        },
        "about": {
          "type": "string"
        },
        "experiences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProfileExperience"
          }
        },
        "educations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProfileEducation"
          }
        },
        "certifications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProfileCertification"
          }
        },
        "skills": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProfileSkill"
          }
        },
        "awards": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProfileAward"
          }
        },
        "languages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProfileLanguage"
          }
        },
        "interests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProfileInterest"
          }
        },
        "profilePicture": {
          "type": "string"
        },
        "profileBackground": {
          "type": "string"
        }
      }
    },
    "v1ProfileLocation": {
      "type": "object",
      "properties": {
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        }
      }
    },
    "v1Role": {
      "type": "string",
      "enum": [
        "ROLE_UNSPECIFIED",
        "ROLE_ADMIN",
        "ROLE_MANAGER",
        "ROLE_USER",
        "ROLE_GUEST"
      ],
      "default": "ROLE_UNSPECIFIED",
      "title": "- ROLE_UNSPECIFIED: Role is not defined\n - ROLE_ADMIN: View all data. Create new managers"
    },
    "v1Scope": {
      "type": "string",
      "enum": [
        "SCOPE_UNSPECIFIED",
        "SCOPE_SYSTEM"
      ],
      "default": "SCOPE_UNSPECIFIED"
    },
    "v1UpdateAccountRequestBody": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "v1UpdateAccountResponse": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/v1Account"
        }
      }
    }
  },
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "ApiKeyAuth": []
    }
  ]
}
